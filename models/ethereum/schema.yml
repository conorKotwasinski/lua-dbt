version: 2

models:
  - name: ethereum_blocks
    config:
      alias: blocks
    description: "Blocks are batches of transactions with a hash of the previous block in the chain."
    meta:
      url: https://ethereum.org/en/developers/docs/blocks/
    columns:
      - name: number
        description: "The length of the blockchain (count of blocks)"
        tests:
          - unique
          - not_null
        meta:
          # name the clickhouse columns something that makes sense to echarts, e.g. xAxis
          explore:
            title: "Blocks"
            type: "bigNumber"
            subheader: "Mining {{past_30_days}} per day (last 30 days)"
            formats:
              past_30_days: '#,##0'
              total: '#,##0.0,,"M"'
            sql: |
              select 
              count(1) as "total",
              sum(case when b.timestamp >= subtractDays(today(), 30) then 1 else 0 end) / 30 as past_30_days,
              min("number") as "min",
              max("number") as "max"
              from ethereum.blocks as b
      - name: hash
        description: "A unique identifier for the block"
        tests:
          - unique
          - not_null
      - name: timestamp
        description: The timestamp when the block was mined (UTC)
        meta:
          # name the clickhouse columns something that makes sense to echarts, e.g. xAxis
          explore:
            title: "Blocks by day"
            sql: |
              select 
              toDate((t.timestamp)) as "xAxis",
              count(1) as "series_0"
              from ethereum.blocks as t 
              where timestamp > 0
              group by "xAxis"
              order by "xAxis" asc
      - name: size
        description: "Size of block in bytes"
      - name: transaction_count
        description: "# of transactions in the block"
        meta:
          explore:
            title: "Transactions by day"
            sql: |
              select 
              toDate((t.timestamp)) as "xAxis",
              sum(transaction_count) as "series_0"
              from ethereum.blocks as t 
              where timestamp > 0
              group by "xAxis"
              order by "xAxis" asc
      - name: transactions_root
        description: "The root hash of the Merkle tree of all the transactions in the block (32 byte string)"
      - name: miner
        description: "The address of the miner who mined the block"
      - name: nonce
        description: "The nonce used to mine the block"
      - name: uncles
        description: "The hashes of the uncles in the block"
      - name: mix_hash
        description: "a unique identifier for that block."
      - name: logs_bloom
        description: "The bloom filter for the logs in the block"
      - name: state_root
        description: "The root of the state trie at the end of the block"
      - name: difficulty
        description: "The effort required to mine the block"
      - name: total_difficulty
        description: "Cumulative difficulty of all blocks until the current block"
      - name: parent_hash
        description: "The hash of the parent (prior) block"
      - name: sha3_uncles
        description: "A sibling block of the parent block"
      - name: receipts_root
        description: "The hash of the root node of the trie that contains the receipts of all transactions listed in this block."
      - name: gas_used
        description: "The amount of gas used by the block"
        meta:
          explore:
            title: "Gas by day"
            sql: |
              select 
              toDate((t.timestamp)) as "xAxis",
              sum(gas_used) as "series_0"
              from ethereum.blocks as t 
              where timestamp > 0
              group by "xAxis"
              order by "xAxis" asc
      - name: gas_limit
        description: "The gas limit allowed in the block"
      - name: base_fee_per_gas
        description: "The base fee for this block (see EIP-1559)"
      - name: extra_data
        description: "An optional 32-byte space to store extra data"

  - name: ethereum_transactions
    config:
      alias: transactions
    description: >
      Transactions are cryptographically signed instructions from accounts. 
      An account will initiate a transaction to update the state of the Ethereum network. 
      The simplest transaction is transferring ETH from one account to another.
    meta:
      url: https://ethereum.org/en/developers/docs/transactions/
      joins:
        to_domains:
          db: ethereum
          table: domains
          type: left
          left_column: to_address
          sql_on: transactions.to_address = to_domains.owner
        from_domains:
          db: ethereum
          table: domains
          type: left
          left_column: from_address
          sql_on: transactions.from_address = from_domains.owner
        to_tags:
          db: ethereum
          table: tags
          type: left
          left_column: to_address
          sql_on: transactions.to_address = to_tags.address
        from_tags:
          db: ethereum
          table: tags
          type: left
          left_column: from_address
          sql_on: transactions.from_address = from_tags.address
    columns:
      - name: block_number
        description: "Block number of this transaction"
        tests:
          - not_null
      - name: block_timestamp
        description: The timestamp when the block was mined (UTC)
        meta:
          explore:
            title: "Transactions by day"
            sql: |
              select 
              toDate(toDateTime(t.block_timestamp)) as "xAxis",
              count(1) as "series_0"
              from ethereum.transactions as t 
              where block_timestamp > 0
              group by "xAxis"
              order by "xAxis" asc
      - name: block_hash
        description: A unique identifier for the block
      - name: transaction_index
        description: "Index of this transaction within the block"
        tests:
          - not_null
      - name: nonce
        description: "The number of transactions made by the sender prior to this one"
        tests:
          - not_null
      - name: to_address
        description: "Address of the receiver. null when its a contract creation transaction (in lowercase)"
        meta:
          search: recipient
          aliases:
            - to
            - recipient
      - name: from_address
        description: "Address of the sender (in lowercase)"
        tests:
          - not_null
        meta:
          search: signature
          aliases:
            - from
            - signature
      - name: value
        description: "The amount of ETH to transfer from sender to recipient (in WEI, a denomination of ETH, 1 eth = 10^18 wei)"
        meta:
          explore:
            title: "ETH transacted by day"
            sql: |
              select 
              toDate(toDateTime(t.block_timestamp)) as "xAxis",
              sum("value"/1e18) as "series_0"
              from ethereum.transactions as t 
              where block_timestamp > 0
              group by "xAxis"
              order by "xAxis" asc
      - name: gas
        description:  |
          Gas refers to the unit that measures the amount of computational effort required to execute specific operations on the Ethereum network.

          <a class="text-lime-200" href="https://ethereum.org/en/developers/docs/gas/#what-is-gas" target="_blank">More info</a>
      - name: gas_price
        description: |
          Gas price provided by the sender in Wei

          <a class="text-lime-200" href="https://ethereum.org/en/developers/docs/gas/#what-is-gas" target="_blank">More info</a>
        meta:
          explore:
            title: "Avg gas price by day"
            sql: |
              select 
              toDate(toDateTime(t.block_timestamp)) as "xAxis",
              avg("gas_price"/1e9) as "series_0"
              from ethereum.transactions as t 
              where block_timestamp > 0
              group by "xAxis"
              order by "xAxis"
      - name: input
        description: The data sent along with the transaction
      - name: receipt_cumulative_gas_used
        description: The total amount of gas used when this transaction was executed in the block
      - name: receipt_gas_used
        description: The amount of gas used by this specific transaction alone
      - name: receipt_contract_address
        description: The contract address created, if the transaction was a contract creation, otherwise null
      - name: receipt_root
        description: 32 bytes of post-transaction stateroot (pre Byzantium)
      - name: receipt_status
        description: Either 1 (success) or 0 (failure) (post Byzantium)
      - name: max_fee_per_gas
        description: "Maximum limit user is willing to pay for their transaction to be executed."
      - name: max_priority_fee_per_gas
        description: "A fee (tip) to incentivize miners to include a transaction in the block."
      - name: transaction_type
        description: "0 = Legacy, 1 = Access List, 2 = Dynamic Fee"
      - name: receipt_effective_gas_price
        description: |
          The actual value per gas deducted from the senders account. Replacement of gas_price after EIP-1559

          <a class="text-lime-200" href="https://ethereum.org/en/developers/docs/gas/#what-is-gas" target="_blank">More info</a>
      - name: hash
        description: "With the signature hash, the transaction can be cryptographically proven that it came from the sender and submitted to the network."
        tests:
          - not_null

  - name: ethereum_logs
    config:
      alias: logs
    description: >
      Logs are are a cheap way to store data on the Ethereum blockchain. 
      An example is using logs to store historical data that can be rendered by a frontend.
    meta:
      url: https://web3js.readthedocs.io/en/v1.5.2/web3-eth.html#getpastlogs
    columns:
      - name: block_number
        description: "Block number of the transaction associated with this "
        tests:
          - not_null
      - name: block_timestamp
        description: The timestamp when the block was mined (UTC)
        meta:
          explore:
            title: "Logs by day"
            sql: |
              select 
              toDate(toDateTime(t.block_timestamp)) as "xAxis",
              count(1) as "series_0"
              from ethereum.logs as t 
              where block_timestamp > 0
              group by "xAxis"
              order by "xAxis" asc
      - name: block_hash
        description: "A unique identifier for the block"
        tests:
          - not_null
      - name: address
        description: "Address this event originated from."
        tests:
          - not_null
      - name: data
        description: "The data containing non-indexed log parameter"
        tests:
          - not_null
      - name: topic1
        description: "Topic 1-3 contains indexed parameters of the log"
      - name: topic2
        description: "Topic 1-3 contains indexed parameters of the log"
      - name: topic3
        description: "Topic 1-3 contains indexed parameters of the log"
      - name: topic4
        description: "Topic 1-3 contains indexed parameters of the log"
      - name: log_index
        description: "Integer of the event index position in the block"
      - name: transaction_hash
        description: "Integer of the event index position in the block"
      - name: transaction_index
        description: "Index of this transaction within the block"

  - name: ethereum_events
    config:
      alias: events
    description: >
      Events are decoded logs from contract interactions
    meta:
      url: https://luabase.notion.site/Decode-data-4756776acf9c40efacf0018de7119a52
      # could add this during the python process to get schema for all tables automatically
      createSql: |
        CREATE TABLE default.events_local
          (
              `block_hash` String,
              `block_number` Int64,
              `transaction_hash` String CODEC(ZSTD(1)),
              `transaction_index` Int64 CODEC(T64, LZ4),
              `log_index` Int64 CODEC(T64, LZ4),
              `address` LowCardinality(String),
              `abi_name` LowCardinality(String),
              `name` String CODEC(ZSTD(1)),
              `type` String CODEC(ZSTD(1)),
              `value` String CODEC(ZSTD(1)),
              INDEX transaction_hash_idx transaction_hash TYPE bloom_filter GRANULARITY 1
          )
          ENGINE = MergeTree
          PARTITION BY intDiv(block_number, 1000000)
          PRIMARY KEY (block_number, transaction_hash)
          ORDER BY (block_number, transaction_hash)
          SETTINGS index_granularity = 8192
    columns:
      - name: block_number
        description: "Block number of the transaction associated with this "
        tests:
          - not_null
      - name: block_hash
        description: "A unique identifier for the block"
        tests:
          - not_null
      - name: transaction_hash
        description: "Integer of the event index position in the block"
      - name: transaction_index
        description: "Index of this transaction within the block"
      - name: log_index
        description: "Index of this log within this transactions logs"
      - name: address
        description: "Address that logged this event"
        meta:
          # name the clickhouse columns something that makes sense to echarts, e.g. xAxis
          explore:
            title: "Events by contract name"
            type: "bar"
            sql: |
              with a1 as (
                  select 
                  address,
                  count() as ct
                  from ethereum.events AS e
                  group by address
                  order by ct desc
                  limit 1500
              )

              SELECT
              joinGet(ethereum.tags_join_engine, 'name_tag', e.address) AS "xAxis",
              sum(ct) AS series_0
              FROM a1 AS e
              GROUP BY "xAxis"
              ORDER BY series_0 DESC
              LIMIT 15
      - name: abi_name
        description: "ABI event name"
        meta:
          # name the clickhouse columns something that makes sense to echarts, e.g. xAxis
          explore:
            title: "ABI event names"
            type: "bar"
            sql: |
              SELECT
              abi_name AS "xAxis",
              count(1) AS series_0
              FROM ethereum.events AS e
              GROUP BY "xAxis"
              ORDER BY series_0 DESC
              LIMIT 15
      - name: name
        description: "Event parameter name"
        meta:
          # name the clickhouse columns something that makes sense to echarts, e.g. xAxis
          explore:
            title: "Event parameter names"
            type: "bar"
            sql: |
              SELECT
              name AS "xAxis",
              count(1) AS series_0
              FROM ethereum.events AS e
              GROUP BY "xAxis"
              ORDER BY series_0 DESC
              LIMIT 15
      - name: type
        description: "Event parameter type"
      - name: value
        description: "Event parameter value"
      - name: value_hex
        description: "Event parameter value (hex)"

  - name: ethereum_domains
    config:
      alias: domains
    description: >
      The Ethereum Name Service (ENS) is a distributed, open, and extensible naming system based on the Ethereum blockchain.
    meta:
      url: https://docs.ens.domains/
    columns:
      - name: block_number
        description: "Block number of the transaction associated with this domain"
        tests:
          - not_null
      - name: block_hash
        description: "A unique identifier for the block"
        tests:
          - not_null
      - name: transaction_hash
        description: "Integer of the event index position in the block"
      - name: transaction_index
        description: "Index of this transaction within the block"
      - name: log_index
        description: "Integer of the event index position in the block"
      - name: domain
        description: "ENS domain that was purchased."
      - name: expires
        description: "Expiration date of the domain"
      - name: owner
        description: "Address that owns the domain"
      - name: cost
        description: "How much the domain was purchased for (in wei)"

  - name: ethereum_tags
    config:
      alias: tags
    description: >
      Tags of addresses known to be associated with some real world entity (e.g. Coinbase)
    meta:
      url: https://luabase.notion.site/Tags-521d6955dc1e472ba37dba71569666a3
    columns:
      - name: address
        description: "The unique public key identifier that points to an Ethereum-compatible wallet"
        tests:
          - not_null
      - name: tag
        description: "Public name tag (often a company / entity) associated with the address"
      - name: label
        description: "Label / category of the tag"
        explore:
          title: "Tags by label"
          type: "bar"
          sql: |
            select 
            count(1) as "series_0",
            t.label as "xAxis"
            from ethereum.tags t
            where t.label != ''
            group by "xAxis"
            order by "series_0" desc
            limit 15

  - name: ethereum_abis
    config:
      alias: abis
    description: Application binary interface (ABI) for select Ethereum contracts with contract name
    columns:
      - name: address
        description: Address for contract
        tests:
          - unique
          - not_null
      - name: name
        description: Name of contract
      - name: abi
        description: | 
          Contract Application Binary Interface (ABI).
          
          <a class="text-lime-200" href="https://docs.soliditylang.org/en/develop/abi-spec.html" target="_blank">More info</a>
      - name: source_code
        description: Source code of the contrat
      - name: deployer_address
        description: |
          `from_address` field from `ethereum.transactions` if the transaction was a contract creation transaction. A contract creation
          transaction will have an address in the `receipt_contract_address` field.

  - name: ethereum_contracts
    config:
      alias: contracts
    description: Ethereum contracts
    columns:
      - name: block_number
        description: The length of the blockchain (count of blocks)
        tests:
          - not_null
      - name: block_timestamp
        description: The timestamp when the block was mined (UTC)
        tests:
          - not_null
      - name: block_hash
        description: A unique identifier for the block
        tests:
          - not_null
      - name: address
        description: Address of the contract
      - name: bytecode
        description: Bytecode of the contract
      - name: function_sighashes
        description: 4-byte function signature hash
      - name: is_erc20
        description: Whether the contract is an ERC20 contract
      - name: is_erc721
        description: Whether the contract is an ERC721 contract

  - name: ethereum_token_transfers
    config:
      alias: token_transfers
    description: Ethereum token transfers
    columns:
      - name: block_number
        description: The length of the blockchain (count of blocks)
        tests:
          - not_null
      - name: block_timestamp
        description: The timestamp when the block was mined (UTC)
        tests:
          - not_null
      - name: block_hash
        description: A unique identifier for the block
        tests:
          - not_null
      - name: transaction_hash
        description: >
          With the signature hash, the transaction can be cryptographically proven that it came from the sender 
          and submitted to the network.
      - name: log_index
        description: Integer of the event index position in the block
      - name: token_address
        description: Token address
      - name: from_address
        description: The sending address
      - name: to_address
        description: The receiving address
      - name: value
        description: The amount transferred from sender to recipient

  - name: ethereum_tokens
    config:
      alias: tokens
    description: Ethereum tokens
    columns:
      - name: block_number
        description: The length of the blockchain (count of blocks)
        tests:
          - not_null
      - name: block_timestamp
        description: The timestamp when the block was mined (UTC)
        tests:
          - not_null
      - name: block_hash
        description: A unique identifier for the block
        tests:
          - not_null
      - name: address
        description: Token address
        tests:
          - unique
          - not_null
      - name: symbol
        description: Token symbol
      - name: name
        description: Token name
      - name: decimals
        description: Decimal places for token
      - name: total_supply
        description: Token total supply

  - name: ethereum_traces
    config:
      alias: traces
    description: Traces are a way to store extra data on the Ethereum blockchain
    columns:
      - name: block_number
        description: The length of the blockchain (count of blocks)
        tests:
          - not_null
      - name: block_timestamp
        description: The timestamp when the block was mined (UTC)
        tests:
          - not_null
      - name: block_hash
        description: A unique identifier for the block
        tests:
          - not_null
      - name: transaction_hash
        description: >
          With the signature hash, the transaction can be cryptographically proven that it came from the sender 
          and submitted to the network.
      - name: transaction_index
        description: Index of this transaction within the block
      - name: from_address
        description: The sending address
      - name: to_address
        description: The receiving address
      - name: value
        description: The amount transferred from sender to recipient
      - name: input
        description: The data containing non-indexed log parameter
      - name: output
      - name: trace_type
        description: Type of trace
      - name: call_type
        description: Type of call
      - name: reward_type
        description: Type of reward
      - name: gas
        description: The amount of gas used by this transaction
      - name: gas_used
        description: The amount of gas used by this transaction
      - name: subtraces
        description: The number of subtraces
      - name: trace_address
        description: The address of this trace
      - name: error
        description: The error message
      - name: status
        description: The status of this trace
      - name: trace_id
        description: Unique identifier for this trace

metrics:
  - name: blocks_count
    label: Blocks
    model: blocks
    description: "The total number of blocks"
    type: count
    sql: number
    meta: { }
  - name: blocks_uniq
    label: Blocks
    model: transactions
    description: "The unique number of blocks"
    type: uniq
    sql: block_numbers
    meta: { }
